// natural input lexer // // treats each char as a variable, case-sensative// for example aB*2 == (a)(B)*2;// num == (n)(u)(m)// // ignores whitespace and symbols not specified like @ $var simple_operators = { '+': 'PLUS',  '-': 'MINUS',  '=': 'EQUAL',  '!': 'FACTORIAL',  '/': 'DIVIDE',  '(': 'LEFT_PAREN',  ')': 'RIGHT_PAREN',  '*': 'MUTIPLY',  '^': 'POWER',  '%': 'MODULUS' };var digits = [ '1', '2', '3', '4', '5', '6', '7', '8', '9' ]var NUM = "NUMBER"var VAR = "VARIABLE"var tokens = Object.keys(simple_operators);function contains(a, obj) {    for (var i = 0; i < a.length; i++) {        if (a[i] === obj)            return true;    }    return false;}function tokenizer(math_input){    var cur_char;    var split_input = []    var input_tokens = []    var j;    for (var i = 0; i < math_input.length; i++)     {        cur_char = math_input.charAt(i);        if ( cur_char in simple_operators)        {            input_tokens.push(simple_operators[cur_char]);            split_input.push(cur_char);        }        else if (cur_char in digits)         {            input_tokens.push(NUM);            j = i + 1            while ( j < math_input.length && math_input.charAt(j) in digits)            {                j++;            }            split_input.push(math_input.slice(i,j));            i = j - 1;        }        else if( "A".charCodeAt() <= cur_char.charCodeAt()                  && cur_char.toUpperCase().charCodeAt() <= "Z".charCodeAt())        {            input_tokens.push(VAR);            split_input.push(cur_char);        }    }    return Array(split_input, input_tokens);}console.log(tokenizer("12+3"));console.log(tokenizer("1234 ^ 3 % 32"));console.log(tokenizer("(1234 ^ 3) % (3)2"));console.log(tokenizer("ASD^((!@)a)1-24s+d-z*Z "));